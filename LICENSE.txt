设置用户名
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ git config --global color.ui true
$ git config --global alias.st status
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
$ git config --global alias.unstage 'reset HEAD'
$ git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

创建版本库
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

初始化
$ git init

vi readme.txt

$ git add readme.txt
如果你确实想添加该文件，可以用-f强制添加到Git：
$ git add -f App.class
$ git commit -m "wrote a readme file"
$ git status
$ git diff readme.txt
用git log可以查看提交历史，以便确定要回退到哪个版本。
$ git log
$ git log --pretty=oneline
用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
$ git reset --hard HEAD^
$ cat readme.txt
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
$ git reflog

当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
$ git checkout -- readme.txt
$ git rm test.txt

$ git remote add origin git@github.com:michaelliao/learngit.git
$ git push -u origin master
$ git push origin master

$ git clone git@github.com:michaelliao/gitskills.git
git checkout命令加上-b参数表示创建并切换
$ git checkout -b dev
$ git switch -c dev

用git branch命令查看当前分支：
$ git branch

$ git merge dev
$ git branch -d dev
feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。
$ git branch -D feature-vulcan

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
用git log --graph命令可以看到分支合并图

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev

$ git stash
$ git stash list
用git stash pop，恢复的同时把stash内容也删了：
$ git stash pop
$ git stash apply stash@{0}
为了方便操作，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：
$ git cherry-pick 4c805e2

$ git remote
$ git remote -v
$ git push origin master
$ git pull
这里表示把你的本地当前分支里的每个提交(commit)取消掉，然后把本地当前分支更新 为最新的"origin"分支最后把保存的这些补丁应用到本地当前分支上。
git pull --rebase
设置dev和origin/dev的链接
$ git branch --set-upstream-to=origin/dev dev

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

rebase操作可以把本地未push的分叉提交历史整理成直线；
$ git rebase
$ git rebase --continue

$ git rebase --abort
git tag <name>就可以打一个新标签：
$ git tag v1.0
可以用命令git tag查看所有标签：
$ git tag

$ git tag v0.9 f52c633

$ git show v0.9
$ git tag -a v0.1 -m "version 0.1 released" 1094adb
$ git tag -d v0.1
$ git push origin v1.0
$ git push origin --tags
$ git push origin :refs/tags/v0.9
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v App.class
把指定文件排除在.gitignore规则外的写法就是!+文件名，所以，只需把例外文件添加进去即可。
















